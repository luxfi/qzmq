name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.22'

jobs:
  test-no-cgo:
    name: Test without CGO (Stub Backend)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
        
    - name: Get dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Run tests (stub backend)
      env:
        CGO_ENABLED: 0
      run: |
        go test -v -race -coverprofile=coverage-nocgo-${{ matrix.os }}-${{ matrix.go }}.txt -covermode=atomic ./...
        
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage-nocgo-${{ matrix.os }}-${{ matrix.go }}.txt
        flags: unittests,nocgo,${{ matrix.os }}
        fail_ci_if_error: false
        
  test-with-cgo:
    name: Test with CGO (ZMQ Backend)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
        
    - name: Install ZeroMQ (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev pkg-config
        
    - name: Install ZeroMQ (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install zeromq pkg-config
        
    - name: Get dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Run tests (zmq backend)
      env:
        CGO_ENABLED: 1
      run: |
        go test -v -race -coverprofile=coverage-cgo-${{ matrix.os }}-${{ matrix.go }}.txt -covermode=atomic ./...
        
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage-cgo-${{ matrix.os }}-${{ matrix.go }}.txt
        flags: unittests,cgo,${{ matrix.os }}
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Install ZeroMQ (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev pkg-config
        
    - name: Install ZeroMQ (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install zeromq pkg-config
        
    - name: Build without CGO (stub backend)
      env:
        CGO_ENABLED: 0
      run: |
        go build -v ./...
        
    - name: Build with CGO (zmq backend)
      if: matrix.os != 'windows-latest'
      env:
        CGO_ENABLED: 1
      run: |
        go build -v ./...
        
    - name: Build examples without CGO
      env:
        CGO_ENABLED: 0
      run: |
        cd examples/basic
        go build -v .
        
    - name: Build examples with CGO
      if: matrix.os != 'windows-latest'
      env:
        CGO_ENABLED: 1
      run: |
        cd examples/basic
        go build -v .

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Install ZeroMQ
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev pkg-config
        
    - name: Run benchmarks without CGO
      env:
        CGO_ENABLED: 0
      run: |
        go test -bench=. -benchmem -run=^$ ./... | tee bench-nocgo.txt
        
    - name: Run benchmarks with CGO
      env:
        CGO_ENABLED: 1
      run: |
        go test -bench=. -benchmem -run=^$ ./... | tee bench-cgo.txt
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          bench-nocgo.txt
          bench-cgo.txt

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  hardware-acceleration:
    name: Hardware Acceleration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Detect CUDA (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "Checking for NVIDIA GPU..."
        if command -v nvidia-smi &> /dev/null; then
          nvidia-smi
          echo "HAS_CUDA=1" >> $GITHUB_ENV
        else
          echo "No NVIDIA GPU detected"
          echo "HAS_CUDA=0" >> $GITHUB_ENV
        fi
        
    - name: Detect Metal (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "Checking for Apple Silicon..."
        if [[ $(uname -m) == "arm64" ]]; then
          echo "Apple Silicon detected (MLX support available)"
          echo "HAS_MLX=1" >> $GITHUB_ENV
        else
          echo "Intel Mac detected (no MLX support)"
          echo "HAS_MLX=0" >> $GITHUB_ENV
        fi
        
    - name: Checkout MLX integration
      uses: actions/checkout@v4
      with:
        repository: luxfi/mlx
        path: ../mlx
        
    - name: Run hardware-accelerated tests
      run: |
        echo "Hardware acceleration environment:"
        echo "  HAS_CUDA: ${HAS_CUDA:-0}"
        echo "  HAS_MLX: ${HAS_MLX:-0}"
        
        # Test with hardware acceleration if available
        if [[ "${HAS_CUDA:-0}" == "1" || "${HAS_MLX:-0}" == "1" ]]; then
          echo "Running hardware-accelerated tests..."
          CGO_ENABLED=1 go test -v -tags "cuda mlx" -run TestHardwareAcceleration ./...
        else
          echo "No hardware acceleration available, skipping GPU tests"
        fi
        
    - name: Benchmark with hardware acceleration
      if: env.HAS_CUDA == '1' || env.HAS_MLX == '1'
      run: |
        echo "Running hardware-accelerated benchmarks..."
        CGO_ENABLED=1 go test -bench=. -benchmem -tags "cuda mlx" -run=^$ ./... | tee bench-gpu.txt
        
    - name: Upload GPU benchmark results
      if: env.HAS_CUDA == '1' || env.HAS_MLX == '1'
      uses: actions/upload-artifact@v4
      with:
        name: gpu-benchmark-results-${{ matrix.os }}
        path: bench-gpu.txt

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-no-cgo, test-with-cgo]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Install ZeroMQ
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev pkg-config
        
    - name: Run integration tests
      run: |
        # Test that both backends work
        echo "Testing stub backend..."
        CGO_ENABLED=0 go test -v -run TestAllPatterns ./...
        
        echo "Testing ZMQ backend..."
        CGO_ENABLED=1 go test -v -run TestAllPatterns ./...
        
        echo "Testing security modes..."
        CGO_ENABLED=0 go test -v -run TestSecurityModes ./...
        CGO_ENABLED=1 go test -v -run TestSecurityModes ./...
        
        echo "Testing concurrent connections..."
        CGO_ENABLED=0 go test -v -run TestConcurrentConnections ./...
        CGO_ENABLED=1 go test -v -run TestConcurrentConnections ./...
        
  mainnet-readiness:
    name: Mainnet Readiness Tests
    runs-on: ubuntu-latest
    needs: [test-no-cgo, test-with-cgo, hardware-acceleration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Install ZeroMQ
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev pkg-config
        
    - name: Run mainnet readiness tests (CGO disabled)
      env:
        CGO_ENABLED: 0
        LUX_ENV: production
        LUX_CHAIN: X
      run: |
        echo "Running mainnet readiness tests with stub backend..."
        go test -v -run TestMainnetReadiness -timeout 10m ./...
        
    - name: Run mainnet readiness tests (CGO enabled)
      env:
        CGO_ENABLED: 1
        LUX_ENV: production
        LUX_CHAIN: X
      run: |
        echo "Running mainnet readiness tests with ZMQ backend..."
        go test -v -run TestMainnetReadiness -timeout 10m ./...

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test-no-cgo, test-with-cgo]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Install ZeroMQ
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev pkg-config
        
    - name: Generate full coverage report
      run: |
        echo "Generating coverage for stub backend..."
        CGO_ENABLED=0 go test -coverprofile=coverage-stub.out -covermode=atomic ./...
        
        echo "Generating coverage for ZMQ backend..."
        CGO_ENABLED=1 go test -coverprofile=coverage-zmq.out -covermode=atomic ./...
        
        echo "Combining coverage reports..."
        echo "mode: atomic" > coverage-combined.out
        tail -n +2 coverage-stub.out >> coverage-combined.out
        tail -n +2 coverage-zmq.out >> coverage-combined.out
        
        echo "Coverage summary:"
        go tool cover -func=coverage-combined.out
        
    - name: Upload combined coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage-combined.out
        flags: combined
        fail_ci_if_error: false